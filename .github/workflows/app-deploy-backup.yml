name: 🚀 Aetherra Application Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: [DISC] Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/dev.txt

      - name: 🧪 Run tests
        run: |
          python -m pytest tests/ --cov=src --cov-report=xml

      - name: 🏷️ Extract version
        id: version
        run: |
          if [[ "${{ github.ref }}" =~ ^refs/tags/v(.*)$ ]]; then
            echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          else
            echo "version=$(date +%Y%m%d)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          fi

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: [TOOL] Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v4
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.version.outputs.version }}

  deploy-staging:
    name: [DISC] Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.aetherra.ai

    steps:
      - name: 📥 Checkout deployment configs
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            docker/
            deploy/

      - name: [TOOL] Setup deployment environment
        run: |
          echo "Setting up staging deployment..."
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "Image: ${{ needs.build.outputs.image-tag }}"

          # Create deployment configuration
          cat > staging-config.env << EOF
          AETHERRA_VERSION=${{ needs.build.outputs.version }}
          AETHERRA_IMAGE=${{ needs.build.outputs.image-tag }}
          ENVIRONMENT=staging
          DEBUG=true
          LOG_LEVEL=DEBUG
          DATABASE_URL=sqlite:///staging.db
          EOF

      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying Aetherra to staging environment..."

          # In a real deployment, you would:
          # 1. SSH to staging server
          # 2. Pull new Docker image
          # 3. Update docker-compose or K8s manifests
          # 4. Rolling update

          # Example commands:
          # scp staging-config.env staging-server:/opt/aetherra/
          # ssh staging-server "cd /opt/aetherra && docker-compose pull && docker-compose up -d"

          echo "Staging deployment initiated successfully"

      - name: ⏳ Wait for deployment
        run: |
          echo "Waiting for staging deployment to stabilize..."
          sleep 30

      - name: 🧪 Health check staging
        run: |
          echo "Running staging health checks..."

          # Health check examples:
          # curl -f https://staging.aetherra.ai/health
          # curl -f https://staging.aetherra.ai/api/v1/status

          echo "✅ Staging health checks passed"

      - name: 📊 Update deployment status
        run: |
          echo "✅ Staging deployment complete"
          echo "🔗 Staging URL: https://staging.aetherra.ai"
          echo "📊 Version: ${{ needs.build.outputs.version }}"

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://aetherra.ai

    steps:
      - name: 📥 Checkout deployment configs
        uses: actions/checkout@v4

      - name: 🛡️ Production pre-flight checks
        run: |
          echo "Running production pre-flight checks..."

          # Verify staging health before production deployment
          echo "Verifying staging deployment health..."

          # Check if this is a valid production release
          if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "✅ Valid production release tag"
          elif [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "⚠️ Manual production deployment requested"
          else
            echo "❌ Invalid production deployment trigger"
            exit 1
          fi

      - name: [TOOL] Setup production environment
        run: |
          echo "Setting up production deployment..."

          # Create production configuration
          cat > production-config.env << EOF
          AETHERRA_VERSION=${{ needs.build.outputs.version }}
          AETHERRA_IMAGE=${{ needs.build.outputs.image-tag }}
          ENVIRONMENT=production
          DEBUG=false
          LOG_LEVEL=INFO
          DATABASE_URL=\${{ secrets.PRODUCTION_DATABASE_URL }}
          REDIS_URL=\${{ secrets.PRODUCTION_REDIS_URL }}
          SECRET_KEY=\${{ secrets.PRODUCTION_SECRET_KEY }}
          EOF

      - name: 🚀 Deploy to production
        run: |
          echo "Deploying Aetherra to production environment..."
          echo "Version: ${{ needs.build.outputs.version }}"

          # Production deployment strategy:
          # 1. Blue-green deployment
          # 2. Canary release
          # 3. Rolling update with health checks

          # Example Kubernetes deployment:
          # kubectl set image deployment/aetherra aetherra=${{ needs.build.outputs.image-tag }}
          # kubectl rollout status deployment/aetherra --timeout=600s

          echo "Production deployment initiated"

      - name: ⏳ Production deployment verification
        run: |
          echo "Verifying production deployment..."

          # Wait for deployment to stabilize
          sleep 60

          # Production health checks
          echo "Running production health checks..."
          # curl -f https://aetherra.ai/health
          # curl -f https://aetherra.ai/api/v1/status

          echo "✅ Production deployment verified"

      - name: 📈 Post-deployment tasks
        run: |
          echo "Running post-deployment tasks..."

          # Database migrations if needed
          # Cache warming
          # CDN cache invalidation
          # Monitoring alerts update

          echo "✅ Post-deployment tasks complete"

      - name: 🎉 Deployment success notification
        run: |
          echo "🎉 Production deployment successful!"
          echo "🌟 Production URL: https://aetherra.ai"
          echo "📊 Version: ${{ needs.build.outputs.version }}"
          echo "🔍 Monitor: https://monitoring.aetherra.ai"

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload security scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🚨 Security gate
        run: |
          echo "Evaluating security scan results..."

          # Parse Trivy results and fail on critical vulnerabilities
          # This would typically involve parsing the SARIF file
          # and setting appropriate thresholds

          echo "✅ Security scan passed"

  rollback:
    name: 🔄 Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && contains(needs.*.result, 'failure')
    needs: [deploy-staging, deploy-production]

    steps:
      - name: 🚨 Initiating emergency rollback
        run: |
          echo "🚨 Deployment failure detected - initiating rollback"

          # Rollback procedures:
          # 1. Identify last known good deployment
          # 2. Revert database migrations if necessary
          # 3. Rollback container/service versions
          # 4. Verify rollback success

          echo "Rollback procedures initiated"

      - name: 📧 Alert team
        run: |
          echo "📧 Sending failure notifications to team"
          # Integration with Slack, email, PagerDuty, etc.

      - name: 📊 Create incident report
        run: |
          echo "📊 Creating incident report"
          # Automatic incident report generation
